openapi: 3.0.0
info:
  title: Subbot Webhooks
  version: '1.0'

x-readme:
  explorer-enabled: false

components:

  securitySchemes:
    basic_auth:
      type: http
      scheme: basic

  schemas:

    HandleEventRequestVariables:
      type: object
      properties:
        variables:
          type: object
          description: >
            The variables which were returned from the last call to
            the /handle-event or /start endpoint

    JwtEventRequest:
      type: object
      properties:
        jwt:
          type: string
          description: >
            The JWT that can be used to call the /continue endpoint within the lext 60 seconds.
            This JWT can be used to /continue an interaction with a specific user for
            a specific subbot box instance in a scenario. It can be used more than once within
            its validity delay. You cannot reuse a JWT received for user A 
            to /continue an interaction with another user B.

    Handle_Event_RequestV3:
      allOf:
        - $ref: '#/components/schemas/EventRequestV2'
        - $ref: '#/components/schemas/HandleEventRequestVariables'
        - $ref: '#/components/schemas/JwtEventRequest'

    Handle_Event_RequestV2:
      allOf:
        - $ref: '#/components/schemas/EventRequestV2'
        - $ref: '#/components/schemas/HandleEventRequestVariables'

    Handle_Event_RequestV1:
      allOf:
        - $ref: '#/components/schemas/EventRequestV1'
        - $ref: '#/components/schemas/HandleEventRequestVariables'

    Handle_Event_Request:
      oneOf:
        - $ref: '#/components/schemas/Handle_Event_RequestV1'
        - $ref: '#/components/schemas/Handle_Event_RequestV2'
        - $ref: '#/components/schemas/Handle_Event_RequestV3'

    StartEventRequestGlobalVaribles:
      type: object
      properties:
        global_variables:
          type: object
          description: >
            A set of conversation variables that the bot box can read. 
            Only variables specified in Description.input_variables are available.

    Start_Event_RequestV3:
      allOf:
        - $ref: '#/components/schemas/EventRequestV2'
        - $ref: '#/components/schemas/StartEventRequestGlobalVaribles'
        - $ref: '#/components/schemas/JwtEventRequest'

    Start_Event_RequestV2:
      allOf:
        - $ref: '#/components/schemas/EventRequestV2'
        - $ref: '#/components/schemas/StartEventRequestGlobalVaribles'

    Start_Event_RequestV1:
      allOf:
        - $ref: '#/components/schemas/EventRequestV1'
        - $ref: '#/components/schemas/StartEventRequestGlobalVaribles'

    Start_Event_Request:
      oneOf:
        - $ref: '#/components/schemas/Start_Event_RequestV1'
        - $ref: '#/components/schemas/Start_Event_RequestV2'
        - $ref: '#/components/schemas/Start_Event_RequestV3'

    Exit:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the output connector.
        description:
          type: string
          description: >
            A human-readable description of what it means to exit 
            the bot box via this output connector. Displayed in the Alcméon editor GUI.

    Variable:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the user conversation variable
        description:
          type: string
          description: >
            A human-readable description of the meaning of 
            the content of this variable. Displayed in the Alcméon editor GUI.

    IntegerParameterSpecification:
      type: object
      properties:
        min:
          description: All parameter values should be such that value >= min
          type: integer
        max:
          description: All parameter values should be such that value < max
          type: integer

    FloatParameterSpecification:
      type: object
      properties:
        min:
          description: All parameter values should be such that value >= min
          type: number
        max:
          description: All parameter values should be such that value < max
          type: number

    StringParameterSpecification:
      type: object
      properties:
        regexp:
          type: string
          description: >
            A regular expression that constrains the values allowed. 
            This regular expression should match the [Javascript syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)

    FileParameterSpecification:
      type: object
      properties:
        mime_types:
          description: The list of mime types allowed for this file
          type: array
          items:
            type: string

    ExcelFileSheetHeaderParameterSpecification:
      type: object
      properties:
        name:
          description: Name of header
          type: string
        type:
          description: >
            Type of header. The following types are supported:
              - integer: any positive or negative integers.
              - float: any positive or negative floats.
              - string: any string
              - url: a string, formatted as a url. Only http:// and https:// urls are supported.
              - datetime: a datetime in YYYY-MM-DDTHH:MM:SS+0 format (GMT)
              - url_to_shorten: a string, formatted as a url. Only http:// and https:// urls are supported.
                Any cell within a column of this type will be replaced by a shortened version before
                being stored for use by a subbot
          type: string
          enum: [integer, float, string, url, datetime, url_to_shorten]
        is_mandatory:
          description: If true, mandatory a file that is missing the header cannot be uploaded successfully.
          type: boolean
          default: false

    ExcelFileSheetParameterSpecification:
      type: object
      properties:
        headers:
          type: array
          items:
            $ref: '#/components/schemas/ExcelFileSheetHeaderParameterSpecification'

    ExcelFileParameterSpecification:
      description: If the content of a cell does not match the type of its header, the file will be rejected during upload.
      type: object
      properties:
        sheets:
          type: array
          items:
            $ref: '#/components/schemas/ExcelFileSheetParameterSpecification'

    EnumParameterSpecification:
      type: object
      properties:
        values:
          description: >
            The list of values that can be chosen for this parameter. 
            The bot editor GUI will display this list in a dropdown for selection.
          type: array
          items:
            type: string

    FileParameterValue:
      type: object
      description: The value for parameters of type `file`
      properties:
        url:
          type: string
          format: uri
          description: "Where to download the file. This url should not be cached: it is valid for less than 30 seconds."
        cache_key:
          type: string
          description: A unique id which can be used as the key to cache the file downloaded from the url. This id is warranted to change if the file is changed by the user.

    TabularArraysParameterValue:
      type: object
      description: The value for parameters of type `excel`
      properties:
        url:
          type: string
          format: uri
          description: >
            Where to download the file. This url should not be cached.
            It is valid for less than 30 seconds. This url is the full
            url to the [GET /uploaded-tabular-data](ref:get_uploaded-tabular-data) endpoint.
        cache_key:
          type: string
          description: A unique id which can be used as the key to cache the file downloaded from the url. This id is warranted to change if the file is changed by the user.

    StringParameterValue:
      type: string
      description: The value for parameters of type `string`

    FloatParameterValue:
      type: number
      description: The value for parameters of type `float`

    IntegerParameterValue:
      type: integer
      description: The value for parameters of type `integer`

    BooleanParameterValue:
      type: boolean
      description: The value for parameters of type `boolean`

    UrlParameterValue:
      type: string
      format: uri
      description: The value for parameters of type `url`

    EnumParameterValue:
      type: string
      description: The value for parameters of type `enum`

    ParameterValue:
      description: A value for a parameter
      nullable: true
      oneOf:
        - $ref: '#/components/schemas/StringParameterValue'
        - $ref: '#/components/schemas/FloatParameterValue'
        - $ref: '#/components/schemas/IntegerParameterValue'
        - $ref: '#/components/schemas/BooleanParameterValue'
        - $ref: '#/components/schemas/UrlParameterValue'
        - $ref: '#/components/schemas/EnumParameterValue'
        - $ref: '#/components/schemas/FileParameterValue'
        - $ref: '#/components/schemas/TabularArraysParameterValue'

    Parameter:
      type: object
      properties:
        type:
          type: string
          enum: [integer, float, boolean, string, url, enum, file, excel]
          description: The type of the parameter
        name:
          type: string
          description: The unique name of the box parameter
        description:
          type: string
          description: >
            A human-readable description of the meaning of the content of 
            this parameter. Displayed in the Alcméon editor GUI.
        default:
          $ref: '#/components/schemas/ParameterValue'
        specification:
          $ref: '#/components/schemas/ParameterSpecification'

    ParameterSpecification:
      description: >
        This field contains a type-specific dictionary that describes 
        the set of values allowed for this parameter.


        This field can be set to null or an empty dictionary to indicate 
        that no specific constraints exist for this parameter.
      nullable: true            
      oneOf:
        - $ref: '#/components/schemas/IntegerParameterSpecification'
        - $ref: '#/components/schemas/FloatParameterSpecification'
        - $ref: '#/components/schemas/StringParameterSpecification'
        - $ref: '#/components/schemas/FileParameterSpecification'
        - $ref: '#/components/schemas/ExcelFileParameterSpecification'
        - $ref: '#/components/schemas/EnumParameterSpecification'

    Description:
      type: object
      properties:
        name:
          type: string
          description: The name of the bot. It will be displayed in the Alcméon editor GUI
        version:
          type: string
          description: Which version of the subbot protocol this subbot supports. If this is not specified, we assume the subbot supports the v1 API.
          enum: [v1, v2, v3]
          default: v1
        description:
          type: string
          description: A human-readable description of what the bot does. Displayed in the Alcméon editor GUI
        exits:
          description: A list of Exit objects, each of which describes an output connector for the bot.
          type: array
          items:
            $ref: '#/components/schemas/Exit'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          description: >
            A list of Parameter objects, each of which describes an attribute that can be 
            configured within the Alcméon editor GUI for a box instance.
        input_variables:
          description: >
            A list of Variable objects, each of which describes a user conversation 
            variable that can be read by the bot when a user enters a box via the 
            input connector.
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        output_variables:
          description: >
            A list of Variable objects, each of which describes a user conversation 
            variable that can be written to by the bot when a user exits a box via 
            one of the bot-specific output connector.
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        backends:
          description: >
            A list of backend names that this bot supports. If no value is specified, 
            this bot supports them all.
          type: array
          items:
            $ref: '#/components/schemas/Backend'
        companies:
          description: >
            A list of Alcméon customer names that this bot supports. 
            If no value is specified, this box will be made available to all customers.
          type: array
          items:
            type: string

    ##################################################
    # The core API objects where you need to add new
    # items if you add a new type of backend
    ##################################################

    Backend:
      type: string
      enum:
        - facebook
        - twitter
        - whatsapp
        - gbm
        - webchat
        - instagram

    EventRequestV1:
      type: object
      properties:
        backend:
          $ref: '#/components/schemas/Backend'
          description: The name of the backend this event is generated for
        parameters:
          type: object
          description: The set of key/value pairs associated with the per-box description parameters.
        user_external_id:
          type: string
          description: The raw id of the user in the underlying social network API
        user_name:
          type: string
          description: A user name associated with the underlying social network API
        event:
          oneOf:
            - $ref: 'subbot-messenger.yaml#/components/schemas/MessengerEvent'
            - $ref: 'subbot-twitter.yaml#/components/schemas/TwitterEvent'
            - $ref: 'subbot-whatsapp.yaml#/components/schemas/Whatsapp_Event'
            - $ref: 'subbot-gbm.yaml#/components/schemas/GbmEvent'
            - $ref: 'subbot-webchat.yaml#/components/schemas/WebchatEvent'
            - $ref: 'subbot-bzc.yaml#/components/schemas/Apple_Event'
            - $ref: 'subbot-instagram.yaml#/components/schemas/Instagram_Event'
      required:
        - backend
        - parameters
        - user_external_id
        - user_name
        - event


    EventRequestV2:
      type: object
      description: This object is identical to EventRequestv1, except that the parameters field has been updated to support file parameter values
      properties:
        backend:
          $ref: '#/components/schemas/Backend'
          description: The name of the backend this event is generated for
        parameters:
          type: array
          items:
            description: The set of key/value pairs associated with the per-box description parameters.
            type: object
            properties:
              key:
                type: string
              value:
                $ref: '#/components/schemas/ParameterValue'
        user_external_id:
          type: string
          description: The raw id of the user in the underlying social network API
        user_name:
          type: string
          description: A user name associated with the underlying social network API
        event:
          oneOf:
            - $ref: 'subbot-messenger.yaml#/components/schemas/MessengerEvent'
            - $ref: 'subbot-twitter.yaml#/components/schemas/TwitterEvent'
            - $ref: 'subbot-whatsapp.yaml#/components/schemas/Whatsapp_Event'
            - $ref: 'subbot-gbm.yaml#/components/schemas/GbmEvent'
            - $ref: 'subbot-webchat.yaml#/components/schemas/WebchatEvent'
            - $ref: 'subbot-bzc.yaml#/components/schemas/Apple_Event'
            - $ref: 'subbot-instagram.yaml#/components/schemas/Instagram_Event'
      required:
        - backend
        - parameters
        - user_external_id
        - user_name
        - event

security:
  - basic_auth: []

paths:

  /description:
    get:
      tags:
        - Configuration
      summary: Describe configuration
      description: >
        Whenever a new bot box is added to a scenario, we `GET /description`
        to obtain a description of the bot output connectors, parameters, etc. 


        This endpoint can also be invoked at other times during the bot lifecycle. 

      responses:
        "200":
          description: >
            Return a 200 status to indicate that the data was received successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Description'

  /start:
    post:
      tags: 
        - Runtime
      summary: Handle first event
      description: >
        Whenever a user enters a box via its input connector, this endpoint will 
        be invoked via `POST URL/start`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Start_Event_Request'
      responses:
        "200":
          description: >
            Return a 200 status to indicate that the data was received successfully.
          content:
            application/json:
              schema:
                $ref: 'subbot-response.yaml#/components/schemas/BotResponse'

  /handle-event:
    post:
      tags: 
        - Runtime
      summary: Handle other events
      description: >
        Whenever a user interacts with a bot box after entering via input 
        connector, this endpoint will be invoked via `POST URL/handle-event`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Handle_Event_Request'
      responses:
        "200":
          description: >
            Return a 200 status to indicate that the data was received successfully.
          content:
            application/json:
              schema:
                $ref: 'subbot-response.yaml#/components/schemas/BotResponse'

  /end:
    post:
      tags: 
        - Runtime
      summary: Handle errors
      description: >
        `POST URL/end` is invoked whenever Alcméon thinks the bot box did something 
        wrong and took the “failed” output connector. It is not an error if it is 
        not implemented. Its return value is ignored.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_external_id:
                  type: string
                  description: The raw id of the user in the underlying social network API
      responses:
        "200":
          description: >
            Return a 200 status to indicate that the data was received successfully.
